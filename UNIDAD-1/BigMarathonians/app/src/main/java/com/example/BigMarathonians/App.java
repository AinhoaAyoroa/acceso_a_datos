/*
 * This source file was generated by the Gradle 'init' task
 */
package com.example.BigMarathonians;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.xml.sax.SAXException;

public class App {

    public static void main(String[] args) throws IOException, SAXException, ParserConfigurationException, TransformerConfigurationException, FileNotFoundException, TransformerException {

        App app = new App();

        Document DOM = app.createXML();

        Element root = DOM.createElement("BigMarathonians");

        DOM.appendChild(root);
        
        JSONObject myJson = app.lligJSON("Marathonians.json");
        JSONArray runners = myJson.getJSONArray("marathon_runners");

        for (int i = 0; i < runners.length(); i++) {

            JSONObject runner = runners.getJSONObject(i);

            Element marathonian = DOM.createElement("marathonian");

            Element name = DOM.createElement("name");
            Element nationality = DOM.createElement("nationality");
            Element age = DOM.createElement("age");
            Element club = DOM.createElement("club");
            Element status = DOM.createElement("status");
            Element marathonNames = DOM.createElement("marathon_names");
            Element fastestMarathon = DOM.createElement("fastest_marathon");
            Element record = DOM.createElement("record");
            Element fact = DOM.createElement("notable_fact");

            name.setTextContent(runner.getString("name"));
            nationality.setTextContent(runner.getString("nationality"));
            age.setTextContent(String.valueOf(runner.getInt("age")));
            club.setTextContent(runner.getString("club"));
            status.setTextContent(runner.getString("status"));
            fastestMarathon.setTextContent(runner.getString("fastest_marathon"));
            record.setTextContent(runner.getString("record"));
            fact.setTextContent(runner.getString("notable_fact"));

            JSONArray marathons = runner.getJSONArray("marathon_names");
            for (int j = 0; j < marathons.length(); j++) {
                Element marathonName = DOM.createElement("marathon");
                marathonName.setTextContent(marathons.getString(j));
                marathonNames.appendChild(marathonName);
            }
            
            marathonian.appendChild(name);
            marathonian.appendChild(nationality);
            marathonian.appendChild(age);
            marathonian.appendChild(club);
            marathonian.appendChild(status);
            marathonian.appendChild(marathonNames);
            marathonian.appendChild(fastestMarathon);
            marathonian.appendChild(record);
            marathonian.appendChild(fact);

            root.appendChild(marathonian);
        }
        
        app.exportXML("Marathonians.xml", DOM);
    }

    public void exportXML(String filename, Document doc) throws TransformerConfigurationException, FileNotFoundException, TransformerException {

        Transformer trans = TransformerFactory.newInstance().newTransformer();
        DOMSource source = new DOMSource(doc);
        StreamResult result = new StreamResult(new FileOutputStream(filename));
        
        trans.transform(source, result);
    }

    public Document createXML() throws IOException, SAXException, ParserConfigurationException, FileNotFoundException {

        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
        Document doc = dBuilder.newDocument();

        return doc;
    }

    private JSONObject lligJSON(String filename) {
        try {
            String myJson;
            try (FileReader file = new FileReader(filename)) {
                myJson = "";
                int i;
                while ((i = file.read()) != -1) {
                    myJson = myJson + ((char) i);
                }
            }
            return (new JSONObject(myJson));

        } catch (IOException | JSONException e) {
            System.out.println("Error reading the file");
            return null;
        }
    }
}
